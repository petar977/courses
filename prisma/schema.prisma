// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model UserRoles {
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  role   Roles   @relation(fields: [roleId], references: [id], onDelete: Cascade) 
  roleId Int    

   @@id([userId, roleId])
}

model Roles {
  id     Int     @id @default(autoincrement())
  role   String
  user   UserRoles[]

  @@map("Roles")
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime? @map("email_verified")
  password          String?
  image             String?
  accounts          Account[]
  role              UserRoles[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  courses           Course[]

  @@map("Users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Accounts")
}

model VerificationToken {
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique ([email, token])
}

model TwoFactorToken {
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique ([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique ([userId])
}

model Course {
  id          String  @id @default(uuid())
  title       String  @db.Text
  description String? @db.Text
  ImageUrl    String? @db.Text
  price       Float?
  isPublished Boolean @default(false)
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  attachments Attachment[]
  chapters    Chapter[]
  purchases     Purchase[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique ([userId, id])
}

model Category {
  id          String     @id @default(uuid())
  name        String
  courses     Course[]
}

model Attachment {
  id          String     @id @default(uuid())
  name        String
  url         String     @db.Text

  courseId    String
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id            String    @id @default(uuid())
  title         String
  description   String?   @db.Text
  videoUrl      String?   @db.Text
  position      Int
  isPublished   Boolean   @default(false)
  isFree        Boolean   @default(false)

  courseId      String    
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress  UserProgress[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([courseId])
}

model UserProgress {
  id          String    @id @default(uuid())
  userId      String

  chapterId   String
  chapter     Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean   @default(false)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id        String  @id @default(uuid())
  userId    String

  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique ([userId, courseId])
  @@index([courseId])
}


