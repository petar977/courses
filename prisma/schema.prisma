// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model UserRoles {
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  role   Roles   @relation(fields: [roleId], references: [id], onDelete: Cascade) 
  roleId Int    

   @@id([userId, roleId])
}

model Roles {
  id     Int     @id @default(autoincrement())
  role   String
  user   UserRoles[]

  @@map("Roles")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  image         String?
  accounts      Account[]
  role          UserRoles[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  @@map("Users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Accounts")
}

model VerificationToken {
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique ([email, token])
}

model TwoFactorToken {
  id      String @id @default(cuid())
  email   String
  token   String @unique
  expires DateTime

  @@unique ([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique ([userId])
}


